x2<-rep(c(1),times=1000000)
x2
mat <- matrix(x2, nrow = 1000, ncol = 1000, byrow = TRUE)
mat
mat %>%
as.data.frame() %>%
View()
mat %>%
as.data.frame() %>%
pivot_longer(., namees_to = "col_number", values_to = "value") %>%
View()
mat %>%
as.data.frame() %>%
pivot_longer(., names_to = "col_number", values_to = "value") %>%
View()
mat %>%
as.data.frame() %>%
pivot_longer(., cols = everything(), names_to = "col_number", values_to = "value") %>%
View()
#### terra plot ####
mat_rast <- matrix(x2, nrow = 1000, ncol = 1000, byrow = TRUE) %>%
rast()
plot(mat_rast)
library(tidyverse)
library(ggplot2)
library(terra)
x2<-rep(c(1),times=1000000)
x2
#### terra plot ####
mat_rast <- matrix(x2, nrow = 1000, ncol = 1000, byrow = TRUE) %>%
rast()
plot(mat_rast)
#### terra plot ####
mat_rast <- matrix(x2, nrow = 1000, ncol = 1000, byrow = TRUE) %>%
rast()
plot(mat_rast)
dim = 10000
x2<-rep(c(1),times=dim*dim)
x2
#### terra plot ####
mat_rast <- matrix(x2, nrow = dim, ncol = dim, byrow = TRUE) %>%
rast()
plot(mat_rast)
########################################################################## LIBRARY ###########################################################################
library(terra)
library(tidyverse)
library(ggplot2)
library(rgdal)
library(landscapemetrics)
library(sf)
library(tigris)
library(viridis)
library(tidycensus)
library(patchwork)
library(scales)
library(dichromat)
library(basemaps)
library(corrplot)
options(tigris_use_cache = TRUE)
rm(list=ls())
options(scipen=999)
########################################################################### NOTES #############################################################################
########################################################################## DATA UPLOAD #########################################################################
NLCD_2019 <- rast("/Users/joshuagilman/Documents/code/PhD/dissertation_chap_2/data/NLCD/nlcd_GEE/EPSG5070/NLCD_2019_EPSG5070.tif")
# Phoenix AMA Boundary
ama_file <- terra::vect("/Users/joshuagilman/Documents/code/PhD/dissertation_chap_2/data/phoenix_AMA/AMA_and_INA.shp")
phx_ama <- st_as_sf(ama_file)%>%
filter(BASIN_NAME == "PHOENIX AMA") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
phx_ama
plot(phx_ama)
# Maricopa County Boundary
# as SpatVect object from Terra package
maricopa_county <- tigris::counties(state = "Arizona") %>%
# filter(NAME == "Maricopa" | NAME == "Pinal" | NAME == "Pima" | NAME == "Santa Cruz") %>%  # set this to the desired counties
filter(NAME == "Maricopa") %>%  # set this to the desired counties
sf::st_transform(terra::crs(NLCD_2019)) %>%
vect()
maricopa_county
plot(maricopa_county)
PHX_AMA_cropped_2019 <- crop(NLCD_2019, phx_ama)
plot(PHX_AMA_cropped_2019)
# crop the data to fit phx_ama
PHX_AMA_cropped_2019 <- crop(NLCD_2019, phx_ama)
plot(PHX_AMA_cropped_2019)
# get extent
AZ_ext <- as.vector(ext(PHX_AMA_cropped_2019))
# create raster
r <- rast(ncol= ncol(PHX_AMA_cropped_2019), nrow= nrow(PHX_AMA_cropped_2019), xmin= AZ_ext[[1]], xmax= AZ_ext[[2]], ymin= AZ_ext[[3]], ymax= AZ_ext[[4]])
crs(r) <- crs(PHX_AMA_cropped_2019)
# create mask
AZ_mask <- rasterize(phx_ama, r)
plot(r)
plot(AZ_mask)
AZ_mask
PHX_AMA_masked_2019 <- mask(PHX_AMA_cropped_2019, AZ_mask)
plot(PHX_AMA_masked_2019)
AAWS_issued_determination_file <- terra::vect("/Users/joshuagilman/Documents/code/PhD/dissertation_chap_4/data/AAWS_Issued_Determination/AAWS_Issued_Determination.shp")
AAWS_issued_determination <- st_as_sf(ama_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(AAWS_issued_determination)
AAWS_issued_determination_file <- terra::vect("/Users/joshuagilman/Documents/code/PhD/dissertation_chap_4/data/AAWS_Issued_Determination/AAWS_Issued_Determination.shp")
AAWS_issued_determination <- st_as_sf(AAWS_issued_determination_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(AAWS_issued_determination)
plot(PHX_AMA_masked_2019)
lines(AAWS_issued_determination)
# Community Water Systems
CWS_file <- terra::vect("/Users/joshuagilman/Documents/code/PhD/dissertation_chap_4/data/CWS_Service_Area/CWS_Service_Area.shp")
CWS <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(CWS)
plot(PHX_AMA_masked_2019)
# lines(AAWS_issued_determination)
lines(CWS)
plot(PHX_AMA_masked_2019)
# lines(AAWS_issued_determination)
lines(CWS, col = "#FFFFFF")
plot(PHX_AMA_masked_2019)
lines(AAWS_issued_determination)
lines(CWS, col = "#FFFFFF")
st_as_sf(AAWS_issued_determination_file) %>%
# st_transform(terra::crs(NLCD_2019)) %>%
# vect()
View()
st_as_sf(AAWS_issued_determination_file) %>%
filter(AMA == "PHOENIX AMA") %>%
View()
test <- st_as_sf(AAWS_issued_determination_file) %>%
filter(AMA == "PHOENIX AMA") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(test)
st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
View()
st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
View()
st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
View()
st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
filter(CWS_NAME == "CITY OF PHOENIX") %>%
View()
test <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
filter(CWS_NAME == "CITY OF PHOENIX")
plot(test)
test <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
filter(CWS_NAME == "CITY OF PHOENIX") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(test)
plot(phx_ama)
lines(test)
st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
# filter(CWS_NAME == "CITY OF PHOENIX") %>%
View()
st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
# filter(CWS_NAME == "CITY OF PHOENIX") %>%
filter(CWS_NAME == "CITY OF PHOENIX - ANTHEM") %>%
View()
test <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
filter(CWS_NAME == "CITY OF PHOENIX") %>%
filter(CWS_NAME == "CITY OF PHOENIX - ANTHEM") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(phx_ama)
lines(test)
test <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
filter(CWS_NAME == "CITY OF PHOENIX") %>%
filter(CWS_NAME == "CITY OF PHOENIX - ANTHEM") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(phx_ama)
lines(test)
test <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
# filter(CWS_NAME == "CITY OF PHOENIX") %>%
filter(CWS_NAME == "CITY OF PHOENIX - ANTHEM") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(phx_ama)
lines(test)
test <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
# filter(CWS_NAME == "CITY OF PHOENIX") %>%
filter(CWS_NAME == "CITY OF PHOENIX - ANTHEM") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
test <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
filter(CWS_NAME == "CITY OF PHOENIX") %>%
filter(CWS_NAME == "CITY OF PHOENIX - ANTHEM") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(phx_ama)
lines(test)
test <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
filter(CWS_NAME == "CITY OF PHOENIX") %>%
filter(CWS_NAME == "CITY OF PHOENIX - ANTHEM") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(phx_ama)
lines(test)
plot(CWS)
test <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
filter(CWS_NAME == "CITY OF PHOENIX" | CWS_NAME ==  "CITY OF PHOENIX - ANTHEM") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(phx_ama)
lines(test)
st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
View()
test <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
filter(CWS_NAME == "CITY OF AVONDALE" | CWS_NAME == "CITY OF CHANDLER" | CWS_NAME == "CITY OF EL MIRAGE" | CWS_NAME == "TOWN OF GILBERT" | CWS_NAME == "CITY OF GLENDALE" | CWS_NAME == "CITY OF GOODYEAR" | CWS_NAME == "CITY OF MESA" | CWS_NAME == "CITY OF PEORIA" | CWS_NAME == "CITY OF PHOENIX" | CWS_NAME == "CITY OF SCOTTSDALE" | CWS_NAME == "CITY OF TEMPE WATER MGMT DIV" | CWS_NAME == "SURPRISE, CITY OF - MOUNTAIN VISTA") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(phx_ama)
lines(test)
# a couple of CWS are missing here
test <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(RIGHT_TYPE == "LARGE COMMUNITY WATER SYSTEM") %>%
filter(AMA == "PHOENIX AMA") %>%
filter(CWS_NAME == "CITY OF AVONDALE" | CWS_NAME == "CITY OF CHANDLER" | CWS_NAME == "CITY OF EL MIRAGE" | CWS_NAME == "TOWN OF GILBERT" | CWS_NAME == "CITY OF GLENDALE" | CWS_NAME == "CITY OF GOODYEAR" | CWS_NAME == "CITY OF MESA" | CWS_NAME == "CITY OF PEORIA" | CWS_NAME == "CITY OF PHOENIX" | CWS_NAME == "CITY OF SCOTTSDALE" | CWS_NAME == "CITY OF TEMPE WATER MGMT DIV" | CWS_NAME == "SURPRISE, CITY OF - MOUNTAIN VISTA" | CWS_NAME == "APACHE JUNCTION WATER FACILITIES DISTRICT") %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(phx_ama)
lines(test)
plot(phx_ama)
lines(test)
lines(AAWS_issued_determination)
AAWS_issued_determination <- st_as_sf(AAWS_issued_determination_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
filter(AMA == "PHOENIX AMA") %>%
vect()
# Community Water Systems
CWS_file <- terra::vect("/Users/joshuagilman/Documents/code/PhD/dissertation_chap_4/data/CWS_Service_Area/CWS_Service_Area.shp")
CWS <- st_as_sf(CWS_file) %>%
st_transform(terra::crs(NLCD_2019)) %>%
vect()
plot(phx_ama)
lines(test)
lines(AAWS_issued_determination)
plot(phx_ama)
lines(test)
lines(AAWS_issued_determination, col = "blue")
library(tidyverse)
library(ggplot2)
library(tidyverse)
library(ggplot2)
m_LUCC<- readRDS("/Users/joshuagilman/Documents/code/PhD/dissertation_chap_2/data/RDS_files/maricopa_county_LUCC.rds") # maricopa county LUCC
View(m_LUCC)
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC) %>%
View()
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC = sum(value)) %>%
View()
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC = sum(value)) %>%
mutate(urban_construction_rate = lag(total_urban_LULC))
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC = sum(value)) %>%
mutate(urban_construction_rate = lag(total_urban_LULC)) %>%
View()
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC = sum(value)) %>%
mutate(urban_construction_rate = lag(total_urban_LULC, default = 0)) %>%
View()
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC = sum(value)) %>%
mutate(urban_construction_rate = lag(total_urban_LULC, default = total_urban_LULC[1])) %>%
View()
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC = sum(value)) %>%
mutate(urban_construction_rate = total_urban_LULC - lag(total_urban_LULC, default = total_urban_LULC[1])) %>%
View()
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC = sum(value)) %>%
mutate(ucr = total_urban_LULC - lag(total_urban_LULC, default = total_urban_LULC[1])) %>%
rename("year" = "Time") %>%
select(ucr) %>%
View()
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC = sum(value)) %>%
mutate(ucr = total_urban_LULC - lag(total_urban_LULC, default = total_urban_LULC[1])) %>%
rename("Time" = "year") %>%
select(ucr) %>%
View()
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC = sum(value)) %>%
mutate(ucr = total_urban_LULC - lag(total_urban_LULC, default = total_urban_LULC[1])) %>%
rename("Time" = "year") %>%
select(ucr, Time) %>%
View()
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC = sum(value)) %>%
mutate(ucr = total_urban_LULC - lag(total_urban_LULC, default = total_urban_LULC[1])) %>%
rename("Time" = "year") %>%
select(Time, ucr) %>%
View()
SD_urban <- m_LUCC %>%
filter(metric == "ca") %>%
group_by(year) %>%
summarise(total_urban_LULC = sum(value)) %>%
mutate(ucr = total_urban_LULC - lag(total_urban_LULC, default = total_urban_LULC[1])) %>%
rename("Time" = "year") %>%
select(Time, ucr)
write.csv(SD_urban, "/Users/joshuagilman/Documents/code/PhD/dissertation_chap_4/data/SD_data/urban_construction_rate", row.names=FALSE)
write.csv(SD_urban, "/Users/joshuagilman/Documents/code/PhD/dissertation_chap_4/data/SD_data/urban_construction_rate.csv", row.names=FALSE)
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")
library(terra)
library(tidyverse)
library(ggplot2)
library(tmap)
library(rgdal)
library(landscapemetrics)
library(landscapetools)
library(sf)
library(tigris)
library(FedData)
library(wesanderson)
library(patchwork)
library(RColorBrewer)
library(viridis)
library(scales)
library(readxl)
library(stringr)
library(units)
library(tidycensus)
library(testthat)
options(tigris_use_cache = TRUE) # used by tidycensus I beleive to create shapefiles
rm(list=ls())
library(sp)
########################################################################### LIBRARY ###########################################################################
library(terra)
library(tidyverse)
library(ggplot2)
library(tmap)
library(rgdal)
library(landscapemetrics)
library(landscapetools)
library(sf)
library(sp)
library(tigris)
library(FedData)
library(wesanderson)
library(patchwork)
library(RColorBrewer)
library(viridis)
library(scales)
library(readxl)
library(stringr)
library(units)
library(tidycensus)
library(testthat)
options(tigris_use_cache = TRUE) # used by tidycensus I beleive to create shapefiles
rm(list=ls())
############################################################################## NOTES #############################################################################
# TODO:
# 1) create constructor for class ringr (error checking, extensive tests, allow for multiple points data types to be used by the user)
# 2) generate and store study area objects
# 3) implement function to populate the concentric rings, circles, datasets for each study area
# 4) implement function for landscape pattern analysis for each study area
# 5) implement function for heatmap/rank plot visualization.
############################################################################ DIRECTORY #############################################################################
# Set the working directory to the parent directory of the 'data' folder
setwd("/Users/joshuagilman/Documents/code/PhD/dissertation_chap_4")
############################################################################ MEMORY #############################################################################
memory.limit(size = 16000)
options(scipen = 999)
############################################################################# DATA #############################################################################
#### @NLCD data ####
relative_paths <- c(
"data/NLCD_large/Clipped_NLCD_2001_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2004_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2006_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2008_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2011_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2013_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2016_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2019_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2021_Landcover_CustomArea_EPSG5070.tif"
)
# vector of years corresponding to each raster in nlcd_rasters
years <- c("2001", "2004", "2006", "2008", "2011", "2013", "2016", "2019", "2021")
# Read the NLCD rasters
nlcd_rasters <- lapply(relative_paths, read_and_set_name)
#### @NLCD data ####
relative_paths <- c(
"data/NLCD_large/Clipped_NLCD_2001_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2004_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2006_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2008_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2011_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2013_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2016_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2019_Landcover_CustomArea_EPSG5070.tif",
"data/NLCD_large/Clipped_NLCD_2021_Landcover_CustomArea_EPSG5070.tif"
)
# vector of years corresponding to each raster in nlcd_rasters
years <- c("2001", "2004", "2006", "2008", "2011", "2013", "2016", "2019", "2021")
read_and_set_name <- function(path) {
raster <- rast(path)
return(raster)
}
# Read the NLCD rasters
nlcd_rasters <- lapply(relative_paths, read_and_set_name)
# Assign names to the rasters based on the years
names(nlcd_rasters) <- years
# Check the names of each raster
print(names(nlcd_rasters))
# Plot the first raster as an example
plot(nlcd_rasters[["2021"]])  # Access by year
crs_NLCD <- terra::crs(nlcd_rasters[["2001"]])
crs_NLCD
is_valid_spatial_point <- function(point) {
if (inherits(point, "sf")) {
# Check if sf object is of POINT geometry
return(sf::st_geometry_type(point) == "POINT")
} else if (inherits(point, "SpatialPoints")) {
# Check if it's an sp SpatialPoints object
return(TRUE)
} else if (inherits(point, "SpatVector")) {
# Check if terra SpatVector is of points
return(terra::geomtype(point) == "points")
} else {
return(FALSE)
}
}
install.packages("usethis")
install.packages("devtools")
setwd("/Users/joshuagilman/Documents/code/R_packages/ringr")
create_package(path = ".", overwrite = TRUE)
library(usethis)
library(devtools)
create_package(path = ".", overwrite = TRUE)
create_package(path = ".")
setwd("/Users/joshuagilman/Documents/code/R_packages/ringr")
create_package(path = ".")
